{"version":3,"sources":["App.js","index.js"],"names":["App","contractAddress","useState","kit","setKit","walletAddress","setWalletAddress","nftID","setNftId","inputToken","setInputToken","inputAddress","setinputAddress","connectToContract","loanContract","web3","eth","Contract","abi","getCount","contract","methods","getId","call","count","connectWallet","window","celo","enable","Web3","newKitFromWeb3","getAccounts","accounts","defaultAccount","console","log","alert","getApproval","approve","send","from","mintNFT","mint","useEffect","className","onClick","placeholder","value","onChange","e","target","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"q9IAiGeA,MA5Ff,WAGE,IAAIC,EAAkB,6CAEtB,EAAqBC,qBAArB,mBAAOC,EAAP,KAAWC,EAAX,KACA,EAA0CF,mBAAS,IAAnD,mBAAOG,EAAP,KAAsBC,EAAtB,KACA,EAA0BJ,mBAAS,IAAnC,mBAAOK,EAAP,KAAcC,EAAd,KACA,EAAoCN,mBAAS,IAA7C,mBAAOO,EAAP,KAAmBC,EAAnB,KACA,EAAwCR,mBAAS,IAAjD,mBAAOS,EAAP,KAAqBC,EAArB,KAGMC,EAAiB,iDAAG,qGAClBC,EAAe,IAAIX,EAAIY,KAAKC,IAAIC,SAClCC,EAAIA,IACJjB,GAHoB,kBAMjBa,GANiB,2CAAH,qDASjBK,EAAQ,iDAAG,gHACQN,IADR,cACTO,EADS,gBAEGA,EAASC,QAAQC,QAAQC,OAF5B,OAEXC,EAFW,OAGfhB,EAASgB,EAAQ,GAHF,2CAAH,qDAOPC,EAAa,iDAAG,wGACjBC,OAAOC,KADU,0CAIXD,OAAOC,KAAKC,SAJD,cAKXb,EAAO,IAAIc,IAAKH,OAAOC,MACzBxB,EAAM2B,yBAAef,GANR,SAQMZ,EAAIY,KAAKC,IAAIe,cARnB,OAQXC,EARW,OASXC,EAAiBD,EAAS,GAChC7B,EAAI8B,eAAiBA,EAErB7B,EAAOD,GACPG,EAAiB2B,GAbA,kDAejBC,QAAQC,IAAR,MAfiB,gCAkBnBC,MACE,0EAnBiB,0DAAH,qDAwBdC,EAAW,iDAAG,8GACKxB,IADL,cACZO,EADY,gBAEZA,EAASC,QAAQiB,QAAQ3B,EAAcF,GAAY8B,KAAK,CAAEC,KAAMrC,EAAI8B,iBAFxD,2CAAH,qDAIXQ,EAAO,iDAAG,gHACS5B,IADT,cACRO,EADQ,gBAGRA,EAASC,QAAQqB,OAAOH,KAAK,CAAEC,KAAMrC,EAAI8B,iBAHjC,uBAIIb,EAASC,QAAQC,QAAQC,OAJ7B,OAIVC,EAJU,OAKdU,QAAQC,IAAI,2BAA2BX,EAAQ,GAC/ChB,EAASgB,EAAQ,GANH,4CAAH,qDAeb,OANAmB,qBAAW,WACTlB,GACD,GAAC,IAKA,sBAAKmB,UAAU,MAAf,UACE,6CACI,gCACE,oBAAGA,UAAU,UAAb,2BAAsCvC,EAAtC,OACA,qBAAKuC,UAAU,mBAAf,SACE,oBAAGA,UAAU,gBAAb,sCAAwD3C,OAE1D,qDAAyBM,KACzB,wBAAQsC,QAAS1B,EAAjB,uBACA,uEACA,wBAAQ0B,QAASJ,EAASG,UAAU,aAApC,yBACA,8FACA,uBAAOE,YAAY,WAAWC,MAAOtC,EAAauC,SAAU,SAACC,GAAD,OAAOvC,EAAcuC,EAAEC,OAAOH,MAA9B,IAC5D,uBAAOD,YAAY,mBAAmBC,MAAOpC,EAAeqC,SAAU,SAACC,GAAD,OAAOrC,EAAgBqC,EAAEC,OAAOH,MAAhC,IACtE,wBAAQF,QAASR,EAAjB,gCAIX,EC3FYc,IAASC,WAAWC,SAASC,eAAe,SACpDC,OACH,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,M","file":"static/js/main.97bb6a55.chunk.js","sourcesContent":["import './App.css';\nimport {useState, useEffect} from \"react\";\nimport Web3 from 'web3';\nimport { newKitFromWeb3 } from '@celo/contractkit';\nimport abi from \"./abi.json\"\nfunction App() {\n\n  //State Variables\n  let contractAddress = \"0x0a89DE93dc853cbbC5D9cFaB3c683f529882F1Fe\";\n\n  const [kit,setKit] = useState();\n  const [walletAddress, setWalletAddress] = useState(\"\");\n  const [nftID, setNftId] = useState(\"\");\n  const [inputToken, setInputToken] = useState(\"\");\n  const [inputAddress, setinputAddress] = useState(\"\");\n\n  //Code which is used to create the contract instance everytime\n  const connectToContract = async() => {\n    const loanContract = new kit.web3.eth.Contract(\n        abi.abi,\n        contractAddress\n    );\n\n    return loanContract;\n    \n  }\n  const getCount = async() => {\n    const contract = await connectToContract();\n    let count = await contract.methods.getId().call();\n    setNftId(count - 1);\n  }\n\n   // connect wallet to app\n   const connectWallet = async () => {\n    if (window.celo) {\n      // alert(\"⚠️ Please approve this DApp to use it.\");\n      try {\n        await window.celo.enable();\n        const web3 = new Web3(window.celo);\n        let kit = newKitFromWeb3(web3);\n\n        const accounts = await kit.web3.eth.getAccounts();\n        const defaultAccount = accounts[0];\n        kit.defaultAccount = defaultAccount;\n\n        setKit(kit);\n        setWalletAddress(defaultAccount);\n      } catch (error) {\n        console.log(error);\n      }\n    } else {\n      alert(\n        \"You need to install the celo wallet extension in order to use this app\"\n      );\n    }\n  };\n\n  const getApproval = async() => {\n    const contract = await connectToContract();\n    await contract.methods.approve(inputAddress, inputToken).send({ from: kit.defaultAccount });\n  }\n  const mintNFT = async() => {\n    const contract = await connectToContract();\n\n    await contract.methods.mint().send({ from: kit.defaultAccount });\n    let count = await contract.methods.getId().call();\n    console.log(\"Minted NFT with the ID: \",count - 1);\n    setNftId(count - 1);\n  }\n\n  useEffect( () => {\n    connectWallet();\n  },[] )\n\n//<---------------------------------------------------------------------------------------------------------------------------------->\n  //UI\n  return (\n    <div className=\"App\">\n      <h1>Test Minter</h1>\n          <div>\n            <p className='account'>User Account: {walletAddress} </p>\n            <div className=\"addressContainer\" >\n              <p className='minterAddress' >Minter Contract Address: {contractAddress}</p>\n            </div>\n            <p >Last minted NFT Id: {nftID}</p>\n            <button onClick={getCount} >Get count</button>\n            <p>Click to mint your own NFT👇</p>\n            <button onClick={mintNFT} className='mintButton' >Mint an NFT</button>\n            <p>Click here to give approval to the Loan contract 👇</p>\n            <input placeholder='token Id' value={inputToken}  onChange={(e) => setInputToken(e.target.value)} />\n            <input placeholder='Contract Address' value={inputAddress}  onChange={(e) => setinputAddress(e.target.value)} />\n            <button onClick={getApproval} >Give Approval</button>\n          </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport App from './App';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n"],"sourceRoot":""}